{"version":3,"sources":["images/phdpoolLogo.svg","utilities/WebAppPath.js","components/NavigationBar.js","utilities/LikertSummary.js","utilities/ChartGenerator.js","utilities/networking/objects/Evidence.js","utilities/networking/objects/Opinion.js","utilities/networking/objects/Topic.js","utilities/networking/objects/Idea.js","components/cards/IdeaCard.js","utilities/Formatter.js","utilities/networking/objects/Degree.js","utilities/networking/objects/Expert.js","utilities/networking/objects/University.js","utilities/networking/Network.js","components/Loading.js","components/bodies/HomeBody.js","components/Footer.js","components/bodies/WorkInProgress.js","components/cards/DegreeCard.js","components/cards/ExpertCard.js","components/bodies/ExpertsBody.js","components/bodies/Login.js","components/bodies/CreateExpert.js","utilities/Conviction.js","components/cards/EvidenceCard.js","components/cards/OpinionCard.js","components/cards/TopicCard.js","components/bodies/IdeaBody.js","components/bodies/OpinionBody.js","components/bodies/ExpertBody.js","components/App.js","reportWebVitals.js","index.js"],"names":["WebAppPath","hash","parts","replace","PREFIX","split","DELIMITER","this","name","id","length","HOME","NONE","EXPERTS","LOGIN","CREATE_ACCOUNT","IDEA","OPINION","EXPERT","ABOUT","CONTACT","NavigationBar","props","handleLogout","bind","onUserChange","App","NO_USER_ID","NO_USER_NAME","userName","getUserName","Navbar","Text","Button","className","variant","onClick","href","getLoginHash","bg","expand","Brand","getHomeHash","src","PhdpoolLogo","alt","width","Toggle","aria-controls","Collapse","Nav","Link","getExpertsHash","getCreateAccountHash","renderUserOrLogin","React","Component","LikertSummary","opinions","stronglyDisagreeCount","disagreeCount","netrualCount","agreeCount","stronglyAgreeCount","conviction","greatestConviction","Math","max","likertsCount","weightedLikerts","WEIGHT","STRONGLY_DISAGREE","DISAGREE","NETRUAL","AGREE","STRONGLY_AGREE","percentage","MAX","colorString","adjustedPercentage","DISAGREE_COLOR","tweenTo","NETRUAL_COLOR","AGREE_COLOR","Highcharts","Color","setOpacity","get","ChartGenerator","likerts","options","getIdeaChartOptions","series","data","showInLegend","plotOptions","areaspline","fillColor","getColor","highcharts","chart","type","events","render","ticks","yAxis","tick","isLast","label","translate","TOP_Y_AXIS_LABEL_OFFSET","marginTop","CHART_MARGIN_TOP","title","xAxis","categories","min","enabled","labels","formatter","TOP_Y_AXIS_LABEL_FONT_SIZE","value","allowDecimals","credits","Evidence","json","link","description","opinionsJustified","opinions_justified","supportsIdeas","supports_ideas","Opinion","onIdea","on_idea","heldByExpert","held_by_expert","evidence","opinion_evidence","map","statement","expertName","expert_name","ideaName","idea_name","Topic","expertises","Idea","proposedBy","proposed_by","publishDate","pub_date","topics","IdeaCard","idea","likertSummary","subtitle","getSubtitle","text","toFixed","Card","style","WIDTH","Body","createIdeaChart","Title","Subtitle","getIdeaHash","Formatter","cards","cols","i","card","push","Col","Row","Degree","degreeFrom","deg_from","givenTo","given_to","university","titleName","title_name","Expert","firstname","first_name","lastname","last_name","middleName","middle_name","email","biography","credentials","proposedIdeas","proposed_ideas","University","location","degreesFrom","degrees_from","Network","Promise","resolve","reject","axios","IDEAS_API_URL","then","response","ideas","catch","reason","pubDate","post","EXPERTS_API_URL","experts","DEGREE_TITLE_API_URL","UNIVERSITY_API_URL","universities","OPINION_API_URL","DEGREE_API_URL","EVIDENCE_API_URL","EXPERTISE_API_URL","properties","expertiseId","expertiseData","expertiseName","expertiseResponse","degreeTitleId","createExpertise","degreeTitleData","degreeTitle","expertise","degreeTitleResponse","universityId","universityData","universityName","universityLocation","universityResponse","expertId","all","createDegreeTitle","createUniversity","values","degreeData","degreeResponse","expertData","firstName","lastName","expertResponse","createDegree","_","BASE_API_URL","Loading","display","justifyContent","alignItems","backgroundColor","color","height","HomeBody","state","getIdeas","setState","Container","Jumbotron","ideaList","fluid","getCardCompilation","renderInfo","renderIdeas","Footer","WorkInProgress","DegreeCard","degree","expert","ListGroup","ListGroupItem","ExpertCard","bio","getDefaultBio","getExpertHash","renderDegrees","ExpertsBody","getExperts","expertList","renderExperts","Login","handleUserChange","e","preventDefault","target","elements","expertSelected","expertOptions","firstAndLast","superKey","Form","onSubmit","Group","controlId","Label","Control","as","renderExpertSelector","CreateExpert","handleCreateNewExpertButton","handleCreateNewDegreeButton","handleCreateNewUniversityButton","handleCreateNewExpertiseButton","degreeTitles","createNewDegree","createNewUniversity","createNewExpertise","getDegreeTitles","getUniversities","getExpertises","createExpert","degreeTitleIdAndExpertiseId","leftCol","rightCol","required","placeholder","xs","renderDegreeInput","renderUniversityInput","Conviction","string","ALL_CONVICTIONS","EvidenceCard","OpinionCard","opinion","opinionEvidence","Header","fromValue","renderEvidence","getOpinionHash","TopicCard","topic","IdeaBody","getIdea","console","log","ideaEvidence","ideaOpinions","ideaTopics","Table","renderTopics","renderOpinions","OpinionBody","getOpinion","class","ExpertBody","getExpert","defaultEmail","getDefaultEmail","opacity","expertIdeas","expertOpinions","uni","bordered","getEmailText","defaults","xsrfCookieName","xsrfHeaderName","giveUserName","path","window","userId","addEventListener","history","pushState","isHome","isExperts","isLogin","isCreateAccount","isIdea","isContact","isAbout","isOpinion","isExpert","StrictMode","getBody","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.772e27c8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/phdpoolLogo.0ab985aa.svg\";","export default class WebAppPath {\r\n    static DELIMITER = '/';\r\n    static PREFIX = '#';\r\n    static NONE = '';\r\n    static HOME = 'home';\r\n    static EXPERTS = 'experts';\r\n    static LOGIN = 'login';\r\n    static CREATE_ACCOUNT = 'createAccount';\r\n    static IDEA = 'idea';\r\n    static CONTACT = 'contact';\r\n    static ABOUT = 'about';\r\n    static OPINION = 'opinion';\r\n    static EXPERT = 'expert';\r\n\r\n    static getHomeHash() {\r\n        return WebAppPath.PREFIX + WebAppPath.HOME;\r\n    }\r\n\r\n    static getExpertsHash() {\r\n        return WebAppPath.PREFIX + WebAppPath.EXPERTS;\r\n    }\r\n\r\n    static getLoginHash() {\r\n        return WebAppPath.PREFIX + WebAppPath.LOGIN;\r\n    }\r\n\r\n    static getAboutHash() {\r\n        return WebAppPath.PREFIX + WebAppPath.ABOUT;\r\n    }\r\n\r\n    static getContactHash() {\r\n        return WebAppPath.PREFIX + WebAppPath.CONTACT;\r\n    }\r\n\r\n    static getCreateAccountHash() {\r\n        return WebAppPath.PREFIX + WebAppPath.CREATE_ACCOUNT;\r\n    }\r\n\r\n    static getExpertHash(id) {\r\n        return WebAppPath.PREFIX + WebAppPath.EXPERT + WebAppPath.DELIMITER + id;\r\n    }\r\n\r\n    static getIdeaHash(id) {\r\n        return WebAppPath.PREFIX + WebAppPath.IDEA + WebAppPath.DELIMITER + id;\r\n    }\r\n\r\n    static getOpinionHash(id) {\r\n        return WebAppPath.PREFIX + WebAppPath.OPINION + WebAppPath.DELIMITER + id;\r\n    }\r\n\r\n    constructor(hash) {\r\n        hash = hash.replace(WebAppPath.PREFIX, '');\r\n        var parts = hash.split(WebAppPath.DELIMITER);\r\n\r\n        this.name = parts[0];\r\n        this.id = parts.length > 1 ? parts[1] : -1;\r\n    }\r\n\r\n    isHome() {\r\n        return this.name === WebAppPath.HOME || this.name === WebAppPath.NONE;\r\n    }\r\n\r\n    isExperts() {\r\n        return this.name === WebAppPath.EXPERTS;\r\n    }\r\n\r\n    isLogin() {\r\n        return this.name === WebAppPath.LOGIN;\r\n    }\r\n\r\n    isCreateAccount() {\r\n        return this.name === WebAppPath.CREATE_ACCOUNT;\r\n    }\r\n\r\n    isIdea() {\r\n        return this.name === WebAppPath.IDEA;\r\n    }\r\n\r\n    isOpinion() {\r\n        return this.name === WebAppPath.OPINION;\r\n    }\r\n\r\n    isExpert() {\r\n        return this.name === WebAppPath.EXPERT;\r\n    }\r\n\r\n    isAbout() {\r\n        return this.name === WebAppPath.ABOUT;\r\n    }\r\n\r\n    isContact() {\r\n        return this.name === WebAppPath.CONTACT;\r\n    }\r\n}","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport PhdpoolLogo from '../images/phdpoolLogo.svg';\r\nimport Button from 'react-bootstrap/esm/Button';\r\nimport App from './App';\r\nimport WebAppPath from '../utilities/WebAppPath';\r\n\r\nexport default class NavigationBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleLogout = this.handleLogout.bind(this);\r\n    }\r\n\r\n    handleLogout() {\r\n        this.props.onUserChange(App.NO_USER_ID, App.NO_USER_NAME);\r\n    }\r\n\r\n    renderUserOrLogin() {\r\n        var userName = this.props.getUserName();\r\n\r\n        if (userName) {\r\n            return (\r\n                <>\r\n                    <Navbar.Text>{userName}</Navbar.Text>\r\n                    <Button className=\"ml-2\" variant=\"secondary\" onClick={this.handleLogout}>Logout</Button>\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <Navbar.Text><a href={WebAppPath.getLoginHash()}>Login</a></Navbar.Text>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n                <Navbar.Brand href={WebAppPath.getHomeHash()}>\r\n                    <img\r\n                        src={PhdpoolLogo}\r\n                        alt=\"PhD Pool Logo\"\r\n                        width=\"125\"\r\n                    />\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href={WebAppPath.getHomeHash()}>Home</Nav.Link>\r\n                        <Nav.Link href={WebAppPath.getExpertsHash()}>Experts</Nav.Link>\r\n                        <Nav.Link href={WebAppPath.getCreateAccountHash()}>Create Account</Nav.Link>\r\n                    </Nav>\r\n                    {this.renderUserOrLogin()}\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}","import Highcharts from 'highcharts';\r\n\r\nexport default class LikertSummary {\r\n    static WEIGHT = {\r\n        STRONGLY_DISAGREE: 0,\r\n        DISAGREE: 1,\r\n        NETRUAL: 2,\r\n        AGREE: 3,\r\n        STRONGLY_AGREE: 4,\r\n        MAX: 4\r\n    };\r\n\r\n    static DISAGREE_COLOR = new Highcharts.Color('#ff0000'); // Red\r\n    static NETRUAL_COLOR = new Highcharts.Color('#ffff00'); // Yellow\r\n    static AGREE_COLOR = new Highcharts.Color('#00ff00'); // Green\r\n\r\n    constructor(opinions) {\r\n        opinions = opinions || [];\r\n\r\n        this.stronglyDisagreeCount = 0;\r\n        this.disagreeCount = 0;\r\n        this.netrualCount = 0;\r\n        this.agreeCount = 0;\r\n        this.stronglyAgreeCount = 0;\r\n\r\n        for (var opinion of opinions) {\r\n            var conviction = opinion.conviction;\r\n            this.stronglyDisagreeCount += conviction === 0 ? 1 : 0;\r\n            this.disagreeCount += conviction === 1 ? 1 : 0;\r\n            this.netrualCount += conviction === 2 ? 1 : 0;\r\n            this.agreeCount += conviction === 3 ? 1 : 0;\r\n            this.stronglyAgreeCount += conviction === 4 ? 1 : 0;\r\n        }\r\n\r\n        this.greatestConviction = Math.max(this.stronglyDisagreeCount, this.disagreeCount, this.netrualCount, this.agreeCount, this.stronglyAgreeCount);\r\n\r\n        var likertsCount = this.stronglyDisagreeCount + this.disagreeCount + this.netrualCount + this.agreeCount + this.stronglyAgreeCount;\r\n        var weightedLikerts =\r\n            (LikertSummary.WEIGHT.STRONGLY_DISAGREE * this.stronglyDisagreeCount) +\r\n            (LikertSummary.WEIGHT.DISAGREE * this.disagreeCount) +\r\n            (LikertSummary.WEIGHT.NETRUAL * this.netrualCount) +\r\n            (LikertSummary.WEIGHT.AGREE * this.agreeCount) +\r\n            (LikertSummary.WEIGHT.STRONGLY_AGREE * this.stronglyAgreeCount);\r\n\r\n        this.percentage = weightedLikerts / (LikertSummary.WEIGHT.MAX * likertsCount);\r\n    }\r\n\r\n    getColor() {\r\n        var opacity = 0.75;\r\n        var colorString = '';\r\n\r\n        if (this.percentage < 0.5) { // Between Red and Yellow\r\n            let adjustedPercentage = this.percentage * 2;\r\n            colorString = LikertSummary.DISAGREE_COLOR.tweenTo(LikertSummary.NETRUAL_COLOR, adjustedPercentage);\r\n        } else { // Between Yellow and Green\r\n            let adjustedPercentage = this.percentage - 0.5;\r\n            adjustedPercentage *= 2;\r\n            colorString = LikertSummary.NETRUAL_COLOR.tweenTo(LikertSummary.AGREE_COLOR, adjustedPercentage);\r\n        }\r\n\r\n        return new Highcharts.Color(colorString).setOpacity(opacity).get();\r\n    }\r\n}","import Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport LikertSummary from './LikertSummary';\r\n\r\nexport default class ChartGenerator {\r\n    static TOP_Y_AXIS_LABEL_FONT_SIZE = '26px';\r\n    static TOP_Y_AXIS_LABEL_OFFSET = 12;\r\n    static CHART_MARGIN_TOP = 18;\r\n\r\n    /**\r\n     * @param {LikertSummary} likerts\r\n     * @returns {HighchartsReact}\r\n     */\r\n    static createIdeaChart(likerts) {\r\n        likerts = likerts || new LikertSummary();\r\n\r\n        var options = this.getIdeaChartOptions(likerts.greatestConviction);\r\n\r\n        options.series = [{\r\n            data: [likerts.stronglyDisagreeCount, likerts.disagreeCount, likerts.netrualCount, likerts.agreeCount, likerts.stronglyAgreeCount],\r\n            showInLegend: false,\r\n            name: 'Experts'\r\n        }];\r\n        options.plotOptions.areaspline.fillColor = likerts.getColor()\r\n\r\n        return <HighchartsReact highcharts={Highcharts} options={options} />;\r\n    }\r\n\r\n    /**\r\n     * @returns {Highcharts.Options}\r\n     */\r\n    static getIdeaChartOptions(greatestConviction) {\r\n        return {\r\n            chart: {\r\n                type: 'areaspline',\r\n                events: {\r\n                    render: function () {\r\n                        var ticks = this.yAxis[0].ticks;\r\n                        for (var tick in ticks) {\r\n                            if (ticks[tick].isLast) {\r\n                                ticks[tick].label.translate(0, ChartGenerator.TOP_Y_AXIS_LABEL_OFFSET);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                marginTop: ChartGenerator.CHART_MARGIN_TOP\r\n            },\r\n            title: false,\r\n            xAxis: {\r\n                categories: [\r\n                    'Strongly Disagree',\r\n                    'Disagree',\r\n                    'Netrual',\r\n                    'Agree',\r\n                    'Strongly Agree'\r\n                ],\r\n                min: 0.5,\r\n                max: 3.5\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    enabled: false\r\n                },\r\n                max: greatestConviction,\r\n                labels: {\r\n                    formatter: function () {\r\n                        if (this.isLast) {\r\n                            return '<span style=\"font-size:' + ChartGenerator.TOP_Y_AXIS_LABEL_FONT_SIZE + '; font-weight:bold;\">' + this.value + '</span>';\r\n                        } else {\r\n                            return this.value;\r\n                        }\r\n                    }\r\n                },\r\n                allowDecimals: false\r\n            },\r\n            plotOptions: {\r\n                areaspline: {}\r\n            },\r\n            credits: {\r\n                enabled: false\r\n            }\r\n        };\r\n    }\r\n}","export default class Evidence {\r\n    constructor(json) {\r\n        this.id = json.id;\r\n        this.title = json.title;\r\n        this.link = json.link;\r\n        this.description = json.description;\r\n        this.opinionsJustified = json.opinions_justified;\r\n        this.supportsIdeas = json.supports_ideas;\r\n    }\r\n}","import Evidence from './Evidence'\r\n\r\nexport default class Opinion {\r\n    constructor(json) {\r\n        this.id = json.id;\r\n        this.onIdea = json.on_idea;\r\n        this.heldByExpert = json.held_by_expert;\r\n        this.conviction = json.conviction;\r\n        /** @type {Array<Evidence>} */\r\n        this.evidence = json.opinion_evidence.map(json => new Evidence(json));\r\n        this.statement = json.statement;\r\n        this.expertName = json.expert_name;\r\n        this.ideaName = json.idea_name;\r\n    }\r\n}","export default class Topic {\r\n    constructor(json) {\r\n        this.id = json.id;\r\n        this.name = json.name;\r\n        this.description = json.description;\r\n        this.expertises = json.expertises;\r\n    }\r\n}","import Opinion from './Opinion';\r\nimport Evidence from './Evidence';\r\nimport Topic from './Topic';\r\n\r\nexport default class Idea {\r\n    constructor(json) {\r\n        this.id = json.id;\r\n        this.title = json.title;\r\n        this.proposedBy = json.proposed_by;\r\n        /** @type {Array<Evidence>} */\r\n        this.evidence = json.evidence.map(json => new Evidence(json));\r\n        this.publishDate = json.pub_date;\r\n        /** @type {Array<Topic>} */\r\n        this.topics = json.topics.map(json => new Topic(json));\r\n        this.description = json.description;\r\n        /** @type {Array<Opinion>} */\r\n        this.opinions = json.opinions.map(json => new Opinion(json));\r\n        this.expertName = json.expert_name;\r\n    }\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport LikertSummary from '../../utilities/LikertSummary';\r\nimport ChartGenerator from '../../utilities/ChartGenerator';\r\nimport WebAppPath from '../../utilities/WebAppPath';\r\n// eslint-disable-next-line\r\nimport Idea from '../../utilities/networking/objects/Idea';\r\n\r\nexport default class IdeaCard extends React.Component {\r\n    static WIDTH = '35rem';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /** @type {Idea} */\r\n        var idea = props.idea;\r\n\r\n        this.title = idea.title;\r\n        this.likertSummary = new LikertSummary(idea.opinions);\r\n        this.subtitle = this.getSubtitle(this.likertSummary.percentage);\r\n        this.text = idea.description;\r\n        this.id = idea.id;\r\n    }\r\n\r\n    getSubtitle(percentage) {\r\n        return (100 * percentage).toFixed(0) + '%';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card className=\"text-center\" style={{ width: IdeaCard.WIDTH }}>\r\n                <Card.Body>\r\n                    {ChartGenerator.createIdeaChart(this.likertSummary)}\r\n                    <Card.Title>{this.title}</Card.Title>\r\n                    <Card.Subtitle>{this.subtitle}</Card.Subtitle>\r\n                    <Card.Text>{this.text}</Card.Text>\r\n                    <Button href={WebAppPath.getIdeaHash(this.id)}>Find out more</Button>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}","import Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport default class Formatter {\r\n    /**\r\n     * @param {Array<Card>} cards \r\n     * @returns {Row}\r\n     */\r\n    static getCardCompilation(cards) {\r\n        var cols = [];\r\n\r\n        for (var i = 0; i < cards.length; i++) {\r\n            var card = cards[i] || <Card />;\r\n\r\n            cols.push(\r\n                <Col key={i} className=\"px-1 pb-3 d-flex justify-content-center\">\r\n                    {card}\r\n                </Col>\r\n            );\r\n        }\r\n\r\n        return <Row>{cols}</Row>;\r\n    }\r\n}","export default class Degree {\r\n    constructor(json) {\r\n        this.id = json.id;\r\n        this.title = json.title;\r\n        this.degreeFrom = json.deg_from;\r\n        this.givenTo = json.given_to;\r\n        this.university = json.university;\r\n        this.titleName = json.title_name;\r\n        this.expertName = json.expert_name;\r\n    }\r\n}","import Degree from './Degree'\r\nimport Idea from './Idea';\r\nimport Opinion from './Opinion';\r\n\r\nexport default class Expert {\r\n    constructor(json) {\r\n        this.id = json.id;\r\n        this.firstname = json.first_name;\r\n        this.lastname = json.last_name;\r\n        this.middleName = json.middle_name;\r\n        this.email = json.email;\r\n        this.biography = json.biography;\r\n        /** @type {Array<Degree>} */\r\n        this.credentials = json.credentials.map(json => new Degree(json));\r\n        /** @type {Array<Opinion>} */\r\n        this.opinions = json.opinions.map(json => new Opinion(json));\r\n        /** @type {Array<Idea>} */\r\n        this.proposedIdeas = json.proposed_ideas.map(json => new Idea(json));\r\n    }\r\n}","import Degree from './Degree'\r\n\r\nexport default class University {\r\n    constructor(json) {\r\n        this.id = json.id;\r\n        this.name = json.name;\r\n        this.location = json.location;\r\n        /** @type {Array<Degree>} */\r\n        this.degreesFrom = json.degrees_from.map(json => new Degree(json));\r\n    }\r\n}","import axios from 'axios';\r\nimport Expert from './objects/Expert';\r\nimport Idea from './objects/Idea'\r\nimport Opinion from './objects/Opinion';\r\nimport University from './objects/University';\r\nimport Evidence from './objects/Evidence';\r\nimport Degree from './objects/Degree';\r\n\r\nexport default class Network {\r\n    static BASE_API_URL = 'http://localhost:8000/api/';\r\n    static EXPERTS_API_URL = this.BASE_API_URL + 'Experts/';\r\n    static EXPERTISE_API_URL = this.BASE_API_URL + 'Expertise/';\r\n    static DEGREE_TITLE_API_URL = this.BASE_API_URL + 'DegreeTitle/';\r\n    static UNIVERSITY_API_URL = this.BASE_API_URL + 'University/';\r\n    static DEGREE_API_URL = this.BASE_API_URL + 'Degree/';\r\n    static IDEAS_API_URL = this.BASE_API_URL + 'Ideas/';\r\n    static OPINION_API_URL = this.BASE_API_URL + 'Opinions/';\r\n    static EVIDENCE_API_URL = this.BASE_API_URL + 'Evidence/';\r\n\r\n    /**\r\n     * @returns {Promise<Array<Idea>>} an array of Ideas\r\n     */\r\n    static getIdeas() {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(this.IDEAS_API_URL).then((response) => {\r\n                var ideas = response.data.map(json => new Idea(json));\r\n                resolve(ideas);\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {number} id the ID of the Idea in the API\r\n     * @returns {Promise<Idea>} the Idea with the given ID\r\n     */\r\n    static getIdea(id) {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(this.IDEAS_API_URL + id + '/').then((response) => {\r\n                resolve(new Idea(response.data));\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise<number>} the ID of the newly created Idea\r\n     */\r\n    static createIdea(title, proposedBy, evidence, pubDate, topics, description, opinions) {\r\n        var data = {\r\n            \"title\": title,\r\n            \"proposed_by\": proposedBy,\r\n            \"evidence\": evidence,\r\n            \"pub_date\": pubDate,\r\n            \"topics\": topics,\r\n            \"description\": description,\r\n            \"opinions\": opinions\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            axios.post(this.IDEAS_API_URL, data).then((response) => {\r\n                resolve(response.data.id);\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise<Array<Expert>>} an array of Experts\r\n     */\r\n    static getExperts() {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(this.EXPERTS_API_URL).then((response) => {\r\n                var experts = [];\r\n\r\n                for (var json of response.data) {\r\n                    experts.push(new Expert(json));\r\n                }\r\n\r\n                resolve(experts);\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    static getDegreeTitles() {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(this.DEGREE_TITLE_API_URL).then((response) => {\r\n                resolve(response.data);\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise<Array<University>>} an array of Experts\r\n     */\r\n    static getUniversities() {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(this.UNIVERSITY_API_URL).then((response) => {\r\n                var universities = response.data.map(json => new University(json));\r\n\r\n                resolve(universities);\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise<Array<Opinion>>} an array of Opinion\r\n     */\r\n    static getOpinions() {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(this.OPINION_API_URL).then((response) => {\r\n                var opinions = response.data.map(json => new Opinion(json));\r\n\r\n                resolve(opinions);\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param id the ID of the Idea in the API\r\n     * @returns {Promise<Opinion>} the Idea with the given ID\r\n     */\r\n    static getOpinion(id) {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(this.OPINION_API_URL + id + '/').then((response) => {\r\n                resolve(new Opinion(response.data));\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param id the ID of the Idea in the API\r\n     * @returns {Promise<Degree>} the Idea with the given ID\r\n     */\r\n    static getDegree(id) {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(this.DEGREE_API_URL + id + '/').then((response) => {\r\n                resolve(new Degree(response.data));\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param id the ID of the Idea in the API\r\n     * @returns {Promise<Expert>} the Idea with the given ID\r\n     */\r\n    static getExpert(id) {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(this.EXPERTS_API_URL + id + '/').then((response) => {\r\n                resolve(new Expert(response.data));\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param id the ID of the Idea in the API\r\n     * @returns {Promise<Evidence>} the Idea with the given ID\r\n     */\r\n    static getEvidence(id) {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(this.EVIDENCE_API_URL + id + '/').then((response) => {\r\n                resolve(new Evidence(response.data));\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    static getExpertises() {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(this.EXPERTISE_API_URL).then((response) => {\r\n                resolve(response.data);\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {{\r\n     * expertiseName: string, expertiseId: number\r\n     * }} properties \r\n     * \r\n     * @returns {Promise<number>} the ID of the Expertise\r\n     */\r\n    static createExpertise(properties) {\r\n        return new Promise((resolve, reject) => {\r\n            if (properties.expertiseId === null) {\r\n                var expertiseData = {\r\n                    name: properties.expertiseName\r\n                };\r\n\r\n                axios.post(this.EXPERTISE_API_URL, expertiseData).then((expertiseResponse) => {\r\n                    resolve(expertiseResponse.data.id);\r\n                }).catch((reason) => {\r\n                    reject(reason);\r\n                });\r\n            } else {\r\n                resolve(properties.expertiseId);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {{\r\n     * degreeTitle: string, degreeTitleId: number,\r\n     * expertiseName: string, expertiseId: number\r\n     * }} properties \r\n     * \r\n     * @returns {Promise<number>} the ID of the DegreeTitle\r\n     */\r\n    static createDegreeTitle(properties) {\r\n        return new Promise((resolve, reject) => {\r\n            if (properties.degreeTitleId === null) {\r\n                this.createExpertise(properties).then((expertiseId) => {\r\n                    var degreeTitleData = {\r\n                        title: properties.degreeTitle,\r\n                        expertise: expertiseId\r\n                    };\r\n\r\n                    axios.post(this.DEGREE_TITLE_API_URL, degreeTitleData).then((degreeTitleResponse) => {\r\n                        resolve(degreeTitleResponse.data.id);\r\n                    }).catch((reason) => {\r\n                        reject(reason);\r\n                    });\r\n                }).catch((reason) => {\r\n                    reject(reason);\r\n                });\r\n            } else {\r\n                resolve(properties.degreeTitle);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {{\r\n     * universityName: string, universityLocation: string, universityId: number\r\n     * }} properties \r\n     * \r\n     * @returns {Promise<number>} the ID of the University\r\n     */\r\n    static createUniversity(properties) {\r\n        return new Promise((resolve, reject) => {\r\n            if (properties.universityId === null) {\r\n                var universityData = {\r\n                    name: properties.universityName,\r\n                    location: properties.universityLocation\r\n                };\r\n\r\n                axios.post(this.UNIVERSITY_API_URL, universityData).then((universityResponse) => {\r\n                    resolve(universityResponse.data.id);\r\n                }).catch((reason) => {\r\n                    reject(reason);\r\n                });\r\n            } else {\r\n                resolve(properties.universityId);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {{\r\n     * degreeTitle: string, degreeTitleId: number,\r\n     * expertiseName: string, expertiseId: number,\r\n     * universityName: string, universityLocation: string, universityId: number\r\n     * }} properties \r\n     * @param {number} expertId\r\n     * \r\n     * @returns {Promise<number>} the ID of the Degree\r\n     */\r\n    static createDegree(properties, expertId) {\r\n        return new Promise((resolve, reject) => {\r\n            Promise.all([this.createDegreeTitle(properties), this.createUniversity(properties)]).then((values) => {\r\n                var degreeData = {\r\n                    title: values[0],\r\n                    deg_from: values[1],\r\n                    given_to: expertId\r\n                };\r\n\r\n                axios.post(this.DEGREE_API_URL, degreeData).then((degreeResponse) => {\r\n                    resolve(degreeResponse.data.id);\r\n                }).catch((reason) => {\r\n                    reject(reason);\r\n                });\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {{\r\n     * firstName: string, middleName: string, lastName: string,\r\n     * email: string, biography: string,\r\n     * degreeTitle: string, degreeTitleId: number,\r\n     * expertiseName: string, expertiseId: number,\r\n     * universityName: string, universityLocation: string, universityId: number\r\n     * }} properties \r\n     * \r\n     * @returns {Promise<number>} the ID of the newly created Expert\r\n     */\r\n    static createExpert(properties) {\r\n        var expertData = {\r\n            first_name: properties.firstName,\r\n            last_name: properties.lastName,\r\n            middle_name: properties.middleName,\r\n            email: properties.email,\r\n            biography: properties.biography\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            axios.post(this.EXPERTS_API_URL, expertData).then((expertResponse) => {\r\n                var expertId = expertResponse.data.id;\r\n                this.createDegree(properties, expertId).then((_) => {\r\n                    resolve(expertId);\r\n                }).catch((reason) => {\r\n                    reject(reason);\r\n                });\r\n            }).catch((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n}","import ReactLoading from \"react-loading\";\r\nimport React from 'react';\r\n\r\nexport default class Loading extends React.Component {\r\n    render() {\r\n        return (\r\n                <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    backgroundColor: \"white\" \r\n                }}>\r\n                    <ReactLoading type={\"spinningBubbles\"} color={\"blue\"} height={'10%'} width={'10%'} />\r\n                </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport IdeaCard from '../cards/IdeaCard';\r\nimport Formatter from '../../utilities/Formatter';\r\n// eslint-disable-next-line\r\nimport Idea from '../../utilities/networking/objects/Idea';\r\nimport Network from '../../utilities/networking/Network';\r\nimport Loading from '../Loading';\r\nimport WebAppPath from '../../utilities/WebAppPath';\r\n\r\nexport default class HomeBody extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            /** @type {Array<Idea>} */\r\n            ideas: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Network.getIdeas().then((ideas) => {\r\n            this.setState({ ideas: ideas });\r\n        });\r\n    }\r\n\r\n    renderInfo() {\r\n        return (\r\n            <Container>\r\n                <Jumbotron>\r\n                    <h1>What's the consensus?</h1>\r\n                    <p>\r\n                        We've compiled the views and research of multiple experts to bring you a consensus on some of our\r\n                        biggest questions.\r\n                    </p>\r\n                    <Button href={WebAppPath.getExpertsHash()}>Who are the experts</Button>\r\n                </Jumbotron>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderIdeas() {\r\n        var ideaList = this.state.ideas.map(idea => <IdeaCard idea={idea} />);\r\n\r\n        return (\r\n            <Container fluid>\r\n                {Formatter.getCardCompilation(ideaList)}\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.state.ideas.length > 0) {\r\n            return (\r\n                <Container fluid>\r\n                    {this.renderInfo()}\r\n                    {this.renderIdeas()}\r\n                </Container>\r\n            );\r\n        } else {\r\n            return <Loading />;\r\n        }\r\n\r\n    }\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport default class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <Card bg=\"dark\" text=\"white\" className=\"text-center fixed-bottom rounded-0\">\r\n                <Card.Body className=\"p-2\">\r\n                    Brought to you by Dr. Steven Brown and some coders\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\n\r\nexport default class WorkInProgress extends React.Component {\r\n    render() {\r\n        return (\r\n            <Jumbotron className=\"text-center\">\r\n                <h1>Work in Progress</h1>\r\n                <p>\r\n                    This page is a work in progress. Please come back later.\r\n                </p>\r\n            </Jumbotron>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\r\n// eslint-disable-next-line\r\nimport Degree from '../../utilities/networking/objects/Degree';\r\n\r\nexport default class DegreeCard extends React.Component {\r\n    static WIDTH = '25rem';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /** @type {Degree} */\r\n        var degree = props.degree;\r\n\r\n        this.id = degree.id;\r\n        this.title = degree.titleName;\r\n        this.university = degree.university;\r\n        this.expert = degree.expertName;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={{ width: DegreeCard.WIDTH }}>\r\n                <ListGroup>\r\n                    <ListGroupItem>{this.title}</ListGroupItem>\r\n                    <ListGroupItem>University: {this.university}</ListGroupItem>\r\n                </ListGroup>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\r\n// eslint-disable-next-line\r\nimport Expert from '../../utilities/networking/objects/Expert';\r\nimport WebAppPath from '../../utilities/WebAppPath';\r\nimport DegreeCard from './DegreeCard';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Formatter from '../../utilities/Formatter';\r\n\r\nexport default class ExpertCard extends React.Component {\r\n    static WIDTH = '25rem';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /** @type {Expert} */\r\n        var expert = props.expert;\r\n\r\n        this.id = expert.id;\r\n        this.name = expert.firstname + ' ' + expert.lastname;\r\n        this.university = expert.credentials[0].university;\r\n        this.bio = expert.biography || this.getDefaultBio();\r\n        this.credentials = expert.credentials.map(degree => <DegreeCard degree={degree} />);\r\n    }\r\n\r\n    getDefaultBio() {\r\n        return 'This is a placeholder bio for this expert.';\r\n    }\r\n\r\n    renderDegrees() {\r\n        return (\r\n            <Container fluid>\r\n                {Formatter.getCardCompilation(this.credentials)}\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={{ width: ExpertCard.WIDTH }}>\r\n                <Card.Body><Card.Link href={WebAppPath.getExpertHash(this.id)} className=\"font-weight-bold\">Dr. {this.name}</Card.Link></Card.Body>\r\n                <ListGroup>\r\n                    <ListGroupItem>\r\n                        {this.renderDegrees()}\r\n                    </ListGroupItem>\r\n                </ListGroup>\r\n                <Card.Body>{this.bio}</Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Container from 'react-bootstrap/esm/Container';\r\nimport Formatter from '../../utilities/Formatter';\r\nimport Network from '../../utilities/networking/Network';\r\n// eslint-disable-next-line\r\nimport Expert from '../../utilities/networking/objects/Expert';\r\nimport ExpertCard from '../cards/ExpertCard';\r\nimport Loading from '../Loading';\r\n\r\nexport default class ExpertsBody extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            /** @type {Array<Expert>} */\r\n            experts: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Network.getExperts().then((experts) => {\r\n            this.setState({ experts: experts });\r\n        });\r\n    }\r\n\r\n    renderExperts() {\r\n        var expertList = this.state.experts.map(expert => <ExpertCard expert={expert} />);\r\n\r\n        return (\r\n            <Container fluid>\r\n                { Formatter.getCardCompilation(expertList)}\r\n            </Container >\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.state.experts.length > 0) {\r\n            return (\r\n                <Container fluid>\r\n                    {this.renderExperts()}\r\n                </Container>\r\n            );\r\n        } else {\r\n            return <Loading />;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport Button from 'react-bootstrap/esm/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Network from '../../utilities/networking/Network';\r\n// eslint-disable-next-line\r\nimport Expert from '../../utilities/networking/objects/Expert';\r\nimport Loading from '../Loading';\r\n\r\nexport default class Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleUserChange = this.handleUserChange.bind(this);\r\n\r\n        this.state = {\r\n            /** @type {Array<Expert>} */\r\n            experts: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        Network.getExperts().then((experts) => {\r\n            this.setState({ experts: experts });\r\n        });\r\n    }\r\n\r\n    handleUserChange(e) {\r\n        e.preventDefault();\r\n\r\n        var values = e.target.elements.expertSelected.value.split(':');\r\n        var id = values[0];\r\n        var name = values[1];\r\n\r\n        this.props.onUserChange(id, name);\r\n    }\r\n\r\n    renderExpertSelector() {\r\n        var expertOptions = [];\r\n\r\n        for (var expert of this.state.experts) {\r\n            var firstAndLast = expert.firstname + ' ' + expert.lastname;\r\n            var superKey = expert.id + ':' + firstAndLast;\r\n\r\n            expertOptions.push(\r\n                <option key={expert.id} value={superKey}>{firstAndLast}</option>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Form onSubmit={this.handleUserChange}>\r\n                <Form.Group controlId=\"expertSelected\">\r\n                    <Form.Label>Who are you?</Form.Label>\r\n                    <Form.Control as=\"select\">{expertOptions}</Form.Control>\r\n                </Form.Group>\r\n                <Button type=\"submit\">Login</Button>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.state.experts.length > 0) {\r\n            return this.renderExpertSelector();\r\n        } else {\r\n            return <Loading />;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/esm/Button';\r\nimport Col from 'react-bootstrap/esm/Col';\r\nimport Container from 'react-bootstrap/esm/Container';\r\nimport Network from '../../utilities/networking/Network';\r\n\r\nexport default class CreateExpert extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleCreateNewExpertButton = this.handleCreateNewExpertButton.bind(this);\r\n        this.handleCreateNewDegreeButton = this.handleCreateNewDegreeButton.bind(this);\r\n        this.handleCreateNewUniversityButton = this.handleCreateNewUniversityButton.bind(this);\r\n        this.handleCreateNewExpertiseButton = this.handleCreateNewExpertiseButton.bind(this);\r\n\r\n        this.state = {\r\n            degreeTitles: [],\r\n            createNewDegree: false,\r\n            universities: [],\r\n            createNewUniversity: false,\r\n            expertises: [],\r\n            createNewExpertise: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        Network.getDegreeTitles().then((degreeTitles) => {\r\n            this.setState({ degreeTitles: degreeTitles });\r\n        });\r\n\r\n        Network.getUniversities().then((universities) => {\r\n            this.setState({ universities: universities });\r\n        });\r\n\r\n        Network.getExpertises().then((expertises) => {\r\n            this.setState({ expertises: expertises });\r\n        });\r\n    }\r\n\r\n    handleCreateNewExpertButton(e) {\r\n        e.preventDefault();\r\n\r\n        var firstName = e.target.elements.firstName.value;\r\n        var lastName = e.target.elements.lastName.value;\r\n\r\n        Network.createExpert({\r\n            firstName: firstName,\r\n            middleName: e.target.elements.middleName.value,\r\n            lastName: lastName,\r\n            email: e.target.elements.email.value,\r\n            biography: e.target.elements.biography.value,\r\n            degreeTitle: this.state.createNewDegree ? e.target.elements.degreeTitle.value : null,\r\n            expertiseName: this.state.createNewExpertise ? e.target.elements.expertiseName.value : null,\r\n            expertiseId: this.state.createNewDegree ? (this.state.createNewExpertise ? null : e.target.elements.expertiseId.value) : e.target.elements.degreeTitleIdAndExpertiseId.value.split(',')[1],\r\n            degreeTitleId: this.state.createNewDegree ? null : e.target.elements.degreeTitleIdAndExpertiseId.value.split(',')[0],\r\n            universityName: this.state.createNewUniversity ? e.target.elements.universityName.value : null,\r\n            universityLocation: this.state.createNewUniversity ? e.target.elements.universityLocation.value : null,\r\n            universityId: this.state.createNewUniversity ? null : e.target.elements.universityId.value\r\n        }).then((id) => {\r\n            this.props.onUserChange(id, firstName + ' ' + lastName);\r\n        });\r\n    }\r\n\r\n    handleCreateNewDegreeButton() {\r\n        this.setState({ createNewDegree: true });\r\n    }\r\n\r\n    handleCreateNewExpertiseButton() {\r\n        this.setState({ createNewExpertise: true });\r\n    }\r\n\r\n    renderDegreeInput() {\r\n        var leftCol, rightCol;\r\n\r\n        if (this.state.createNewDegree) {\r\n            leftCol = (\r\n                <Form.Group controlId=\"degreeTitle\">\r\n                    <Form.Label>What is your degree in?</Form.Label>\r\n                    <Form.Control required placeholder=\"Degree Title\" />\r\n                </Form.Group>\r\n            );\r\n\r\n            if (this.state.createNewExpertise) {\r\n                rightCol = (\r\n                    <Form.Group controlId=\"expertiseName\">\r\n                        <Form.Label>What is your expertise in?</Form.Label>\r\n                        <Form.Control required placeholder=\"Expertise\" />\r\n                    </Form.Group>\r\n                );\r\n            } else {\r\n                let options = [];\r\n                for (var expertise of this.state.expertises) {\r\n                    options.push(\r\n                        <option key={expertise.id} value={expertise.id}>{expertise.name}</option>\r\n                    );\r\n                }\r\n\r\n                rightCol = (\r\n                    <Form.Row>\r\n                        <Col>\r\n                            <Form.Group controlId=\"expertiseId\">\r\n                                <Form.Label>Select your Expertise</Form.Label>\r\n                                <Form.Control as=\"select\">\r\n                                    {options}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Label>or you can</Form.Label>\r\n                            <Button className=\"w-100\" onClick={this.handleCreateNewExpertiseButton}>Add a New Expertise</Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                );\r\n            }\r\n        } else {\r\n            let options = [];\r\n            for (var degreeTitle of this.state.degreeTitles) {\r\n                options.push(\r\n                    <option key={degreeTitle.id} value={degreeTitle.id + ',' + degreeTitle.expertise}>{degreeTitle.title}</option>\r\n                );\r\n            }\r\n\r\n            leftCol = (\r\n                <Form.Group controlId=\"degreeTitleIdAndExpertiseId\">\r\n                    <Form.Label>Select your Degree Title</Form.Label>\r\n                    <Form.Control as=\"select\">\r\n                        {options}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            );\r\n\r\n            rightCol = (\r\n                <>\r\n                    <Form.Label>or you can</Form.Label>\r\n                    <Button className=\"w-100\" onClick={this.handleCreateNewDegreeButton}>Add a New Degree</Button>\r\n                </>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Form.Row>\r\n                <Col xs={8}>{leftCol}</Col>\r\n                <Col>{rightCol}</Col>\r\n            </Form.Row>\r\n        );\r\n    }\r\n\r\n    handleCreateNewUniversityButton() {\r\n        this.setState({ createNewUniversity: true });\r\n    }\r\n\r\n    renderUniversityInput() {\r\n        var leftCol, rightCol;\r\n\r\n        if (this.state.createNewUniversity) {\r\n            leftCol = (\r\n                <Form.Group controlId=\"universityName\">\r\n                    <Form.Label>What is the name of your University?</Form.Label>\r\n                    <Form.Control required placeholder=\"University Name\" />\r\n                </Form.Group>\r\n            );\r\n\r\n            rightCol = (\r\n                <Form.Group controlId=\"universityLocation\">\r\n                    <Form.Label>What is the location of your University?</Form.Label>\r\n                    <Form.Control required placeholder=\"University Location\" />\r\n                </Form.Group>\r\n            );\r\n        } else {\r\n            var options = [];\r\n            for (var university of this.state.universities) {\r\n                options.push(\r\n                    <option key={university.id} value={university.id}>{university.name + ' of ' + university.location}</option>\r\n                );\r\n            }\r\n\r\n            leftCol = (\r\n                <Form.Group controlId=\"universityId\">\r\n                    <Form.Label>Select your University</Form.Label>\r\n                    <Form.Control as=\"select\">\r\n                        {options}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            );\r\n\r\n            rightCol = (\r\n                <>\r\n                    <Form.Label>or you can</Form.Label>\r\n                    <Button className=\"w-100\" onClick={this.handleCreateNewUniversityButton}>Add a New University</Button>\r\n                </>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Form.Row>\r\n                <Col xs={8}>{leftCol}</Col>\r\n                <Col>{rightCol}</Col>\r\n            </Form.Row>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Form onSubmit={this.handleCreateNewExpertButton}>\r\n                    <Form.Row>\r\n                        <Col>\r\n                            <Form.Group controlId=\"firstName\"><Form.Control required placeholder=\"First name\" /></Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group controlId=\"middleName\"><Form.Control placeholder=\"Middle name\" /></Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group controlId=\"lastName\"><Form.Control required placeholder=\"Last name\" /></Form.Group>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    {this.renderDegreeInput()}\r\n                    {this.renderUniversityInput()}\r\n                    <Form.Group controlId=\"email\"><Form.Control placeholder=\"Email\" type=\"email\" /></Form.Group>\r\n                    <Form.Group controlId=\"biography\"><Form.Control as=\"textarea\" placeholder=\"Biography\" /></Form.Group>\r\n                    <Button type=\"submit\">Create</Button>\r\n                </Form >\r\n            </Container>\r\n        );\r\n    }\r\n}","export default class Conviction {\r\n    static STRONGLY_DISAGREE = new Conviction('Strongly Disagree', 0);\r\n    static DISAGREE = new Conviction('Disagree', 1);\r\n    static NETRUAL = new Conviction('Netrual', 2);\r\n    static AGREE = new Conviction('Agree', 3);\r\n    static STRONGLY_AGREE = new Conviction('Strongly Agree', 4);\r\n\r\n    static ALL_CONVICTIONS = [\r\n        Conviction.STRONGLY_DISAGREE,\r\n        Conviction.DISAGREE,\r\n        Conviction.NETRUAL,\r\n        Conviction.AGREE,\r\n        Conviction.STRONGLY_AGREE\r\n    ];\r\n\r\n    static fromValue(value) {\r\n        for (var conviction of Conviction.ALL_CONVICTIONS) {\r\n            if (conviction.value === value) {\r\n                return conviction;\r\n            }\r\n        }\r\n\r\n        // An unknown value will be considered a netual opinion\r\n        return Conviction.NETRUAL;\r\n    }\r\n\r\n    static fromString(string) {\r\n        for (var conviction of Conviction.ALL_CONVICTIONS) {\r\n            if (conviction.string === string) {\r\n                return conviction;\r\n            }\r\n        }\r\n\r\n        // An unknown string will be considered a netual opinion\r\n        return Conviction.NETRUAL;\r\n    }\r\n\r\n    constructor(string, value) {\r\n        this.string = string;\r\n        this.value = value;\r\n    }\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\r\n// eslint-disable-next-line\r\nimport Evidence from '../../utilities/networking/objects/Evidence';\r\n\r\nexport default class EvidenceCard extends React.Component {\r\n    static WIDTH = '25rem';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /** @type {Evidence} */\r\n        var evidence = props.evidence;\r\n\r\n        this.id = evidence.id;\r\n        this.title = evidence.title;\r\n        this.link = evidence.link;\r\n        this.description = evidence.description;\r\n        this.supportsIdeas = evidence.supportsIdeas;\r\n        this.opinionsJustified = evidence.opinionsJustified;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={{ width: EvidenceCard.WIDTH }}>\r\n                <ListGroup>\r\n                    <ListGroupItem><a href={this.link}>{this.title}</a></ListGroupItem>\r\n                </ListGroup>\r\n                <Card.Body>{this.description}</Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\r\nimport Button from 'react-bootstrap/Button';\r\nimport WebAppPath from '../../utilities/WebAppPath';\r\n// eslint-disable-next-line\r\nimport Opinion from '../../utilities/networking/objects/Opinion';\r\nimport Conviction from '../../utilities/Conviction';\r\nimport Formatter from '../../utilities/Formatter';\r\nimport Container from 'react-bootstrap/esm/Container';\r\nimport EvidenceCard from './EvidenceCard';\r\n\r\nexport default class OpinionCard extends React.Component {\r\n    static WIDTH = '25rem';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /** @type {Opinion} */\r\n        var opinion = props.opinion;\r\n\r\n        this.id = opinion.id;\r\n        this.onIdea = opinion.onIdea;\r\n        this.heldByExpert = opinion.heldByExpert;\r\n        this.conviction = opinion.conviction;\r\n        this.evidence = opinion.evidence;\r\n        this.statement = opinion.statement;\r\n        this.expertName = opinion.expertName;\r\n    }\r\n\r\n    renderEvidence() {\r\n        var opinionEvidence = this.evidence.map(evidence => <EvidenceCard evidence={evidence} />);\r\n\r\n        return (\r\n            <Container fluid>\r\n                {Formatter.getCardCompilation(opinionEvidence)}\r\n            </Container>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={{ width: OpinionCard.WIDTH }}>\r\n                <Card.Header className=\"font-weight-bold\">Opinion by Dr. {this.expertName}</Card.Header>\r\n                <ListGroup>\r\n                    <ListGroupItem>Conviction: {Conviction.fromValue(this.conviction).string}</ListGroupItem>\r\n                    <ListGroupItem>Evidence: {this.renderEvidence()}</ListGroupItem>\r\n                </ListGroup>\r\n                <Card.Body>{this.statement}</Card.Body>\r\n                <Button href={WebAppPath.getOpinionHash(this.id)}>See Opinion</Button>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\r\n// eslint-disable-next-line\r\nimport Topic from '../../utilities/networking/objects/Topic';\r\n\r\nexport default class TopicCard extends React.Component {\r\n    static WIDTH = '25rem';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /** @type {Topic} */\r\n        var topic = props.topic;\r\n\r\n        this.id = topic.id;\r\n        this.name = topic.name;\r\n        this.description = topic.description;\r\n        this.expertises = topic.expertises;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={{ width: TopicCard.WIDTH }}>\r\n                <ListGroup>\r\n                    <ListGroupItem>{this.name}</ListGroupItem>\r\n                </ListGroup>\r\n                <Card.Body>{this.description}</Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Container from 'react-bootstrap/esm/Container';\r\nimport ChartGenerator from '../../utilities/ChartGenerator';\r\nimport LikertSummary from '../../utilities/LikertSummary';\r\nimport Network from '../../utilities/networking/Network';\r\n// eslint-disable-next-line\r\nimport Idea from '../../utilities/networking/objects/Idea';\r\nimport Loading from '../Loading';\r\nimport OpinionCard from '../cards/OpinionCard';\r\nimport Formatter from '../../utilities/Formatter';\r\nimport EvidenceCard from '../cards/EvidenceCard';\r\nimport TopicCard from '../cards/TopicCard';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nexport default class IdeaBody extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.id = props.id;\r\n\r\n        this.state = {\r\n            /** @type {Idea} */\r\n            idea: null\r\n        };\r\n    }\r\n\r\n    getDefaultTopic() {\r\n        return 'This is a placeholder topic for this idea.';\r\n    }\r\n\r\n    getDefaultEvidence() {\r\n        return 'This is a placeholder evidence for this idea.';\r\n    }\r\n\r\n    getDefaultOpinion() {\r\n        return 'This is a placeholder opinion for this idea.';\r\n    }\r\n\r\n    componentDidMount() {\r\n        Network.getIdea(this.id).then((/** @type {Idea} */ idea) => {\r\n            this.setState({\r\n                idea: idea\r\n            });\r\n        }).catch((reason) => {\r\n            // TODO: We need to add an Error UI\r\n            console.log(reason);\r\n        });\r\n    }\r\n\r\n    renderEvidence() {\r\n        var ideaEvidence = this.state.idea.evidence.map(evidence => <EvidenceCard evidence={evidence} />);\r\n\r\n        return (\r\n            <Container fluid>\r\n                {Formatter.getCardCompilation(ideaEvidence)}\r\n            </Container>\r\n        )\r\n    }\r\n\r\n    renderOpinions() {\r\n        var ideaOpinions = this.state.idea.opinions.map(opinion => <OpinionCard opinion={opinion} />);\r\n\r\n        return (\r\n            <Container fluid>\r\n                {Formatter.getCardCompilation(ideaOpinions)}\r\n            </Container>\r\n        )\r\n    }\r\n\r\n    renderTopics() {\r\n        var ideaTopics = this.state.idea.topics.map(topic => <TopicCard topic={topic} />);\r\n\r\n        return (\r\n            <Container fluid>\r\n                {Formatter.getCardCompilation(ideaTopics)}\r\n            </Container>\r\n        )\r\n    }\r\n\r\n    handleConvictionChange(conviction) {\r\n        console.log('This Expert has updated their opinion to:', conviction);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.idea !== null) {\r\n            return (\r\n                <Container>\r\n                    <Table>\r\n                        <tr>\r\n                            <td>\r\n                                <h1>{this.state.idea.title}</h1>\r\n                                <p>Proposed by: Dr. {this.state.idea.expertName}</p>\r\n                                <p>Topics: </p>\r\n                                {this.renderTopics()}\r\n                                <p>Published on: {this.state.idea.publishDate}</p>\r\n                                <p>Supporting evidence: </p>\r\n                                {this.renderEvidence()}\r\n                            </td>\r\n                            {ChartGenerator.createIdeaChart(new LikertSummary(this.state.idea.opinions))}\r\n                            <p><b>Idea Description: </b>{this.state.idea.description}</p>\r\n                        </tr>\r\n                    </Table>\r\n                    <p><b>Opinions: </b></p>\r\n                    <Container fluid>\r\n                        {this.renderOpinions()}\r\n                    </Container>\r\n                </Container>\r\n            );\r\n        } else {\r\n            return <Loading />;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Network from '../../utilities/networking/Network';\r\n// eslint-disable-next-line\r\nimport Opinion from '../../utilities/networking/objects/Opinion';\r\nimport Loading from '../Loading';\r\nimport Conviction from '../../utilities/Conviction';\r\nimport EvidenceCard from '../cards/EvidenceCard';\r\nimport Container from 'react-bootstrap/esm/Container';\r\nimport Formatter from '../../utilities/Formatter';\r\n\r\nexport default class OpinionBody extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.id = props.id;\r\n\r\n        this.state = {\r\n            /** @type {Opinion} */\r\n            opinion: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        Network.getOpinion(this.id).then((/** @type {Opinion} */ opinion) => {\r\n            this.setState({\r\n                opinion: opinion\r\n            })\r\n        }).catch((reason) => {\r\n            // TODO: We need to add an Error UI\r\n            console.log(reason);\r\n        });\r\n    }\r\n\r\n    renderEvidence() {\r\n        var ideaEvidence = this.state.opinion.evidence.map(evidence => <EvidenceCard evidence={evidence} />);\r\n\r\n        return (\r\n            <Container fluid>\r\n                {Formatter.getCardCompilation(ideaEvidence)}\r\n            </Container>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if (this.state.opinion !== null) {\r\n            return (\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 offset-3 float-md-center\">\r\n                    <Jumbotron>\r\n                        <p>Opinion by: {this.state.opinion.expertName}</p>\r\n                        <p>Idea: {this.state.opinion.ideaName}</p>\r\n                        <p>Conviction: {Conviction.fromValue(this.state.opinion.conviction).string}</p>\r\n                        <p>Statement: {this.state.opinion.statement}</p>\r\n                        <p>Supporting evidence: </p>\r\n                        {this.renderEvidence()}\r\n                    </Jumbotron>\r\n                </div>\r\n            );\r\n        } else {\r\n            return <Loading />;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Network from '../../utilities/networking/Network';\r\n// eslint-disable-next-line\r\nimport Expert from '../../utilities/networking/objects/Expert';\r\nimport Loading from '../Loading';\r\nimport IdeaCard from '../cards/IdeaCard';\r\nimport Container from 'react-bootstrap/esm/Container';\r\nimport OpinionCard from '../cards/OpinionCard';\r\nimport Formatter from '../../utilities/Formatter';\r\n\r\nexport default class ExpertBody extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.id = props.id;\r\n\r\n        this.state = {\r\n            /** @type {Expert} */\r\n            expert: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        Network.getExpert(this.id).then((/** @type {Expert} */ expert) => {\r\n            this.setState({ expert: expert });\r\n        }).catch((reason) => {\r\n            // TODO: We need to add an Error UI\r\n            console.log(reason);\r\n        });\r\n    }\r\n\r\n    getDefaultBio() {\r\n        return 'No bio provided.';\r\n    }\r\n\r\n    getDefaultEmail() {\r\n        return 'No email provided.';\r\n    }\r\n\r\n    getEmailText(email) {\r\n        if (email === \"\") {\r\n            var defaultEmail = this.getDefaultEmail();\r\n            return (\r\n                <tr>\r\n                    <td>Email: </td>\r\n                    <td style={{ opacity: 0.5 }}> {defaultEmail}</td>\r\n                </tr>\r\n            )\r\n        } else {\r\n            return (\r\n                <tr>\r\n                    <td>Email: </td>\r\n                    <td><a href={'mailto:' + email}> {email}</a></td>\r\n                </tr>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderIdeas() {\r\n        var expertIdeas = this.state.expert.proposedIdeas.map(idea => <IdeaCard idea={idea} />);\r\n\r\n        return (\r\n            <Container fluid>\r\n                {Formatter.getCardCompilation(expertIdeas)}\r\n            </Container>\r\n        )\r\n    }\r\n\r\n    renderOpinions() {\r\n        //TODO: Needs a different display of opinions\r\n        var expertOpinions = this.state.expert.opinions.map(opinion => <OpinionCard opinion={opinion} />);\r\n\r\n        return (\r\n            <Container>\r\n                {Formatter.getCardCompilation(expertOpinions)}\r\n            </Container>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if (this.state.expert !== null) {\r\n            //TODO: Make credentials component\r\n            //TODO: Make sure all degrees are shown\r\n            var uni = this.state.expert.credentials[0].university;\r\n\r\n            return (\r\n                <Container>\r\n                    <Table bordered variant=\"dark\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td width={1}>Dr. </td>\r\n                                <td>{this.state.expert.firstname + ' ' + this.state.expert.lastname}</td>\r\n                            </tr>\r\n                            {this.getEmailText(this.state.expert.email)}\r\n                            <tr>\r\n                                <td>Credentials: </td>\r\n                                <td>{uni}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Biography: </td>\r\n                                <td>{this.state.expert.biography || this.getDefaultBio()}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </Table>\r\n                    <h3>Proposed Ideas: </h3>\r\n                    {this.renderIdeas()}\r\n                    <h3>Opinions: </h3>\r\n                    {this.renderOpinions()}\r\n                </Container>\r\n            );\r\n        } else {\r\n            return <Loading />;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport NavigationBar from './NavigationBar';\r\nimport HomeBody from './bodies/HomeBody';\r\nimport Footer from './Footer';\r\nimport WorkInProgress from './bodies/WorkInProgress';\r\nimport ExpertsBody from './bodies/ExpertsBody';\r\nimport Login from './bodies/Login';\r\nimport Container from 'react-bootstrap/Container'\r\nimport CreateExpert from './bodies/CreateExpert';\r\nimport IdeaBody from './bodies/IdeaBody';\r\nimport OpinionBody from './bodies/OpinionBody';\r\nimport ExpertBody from './bodies/ExpertBody';\r\nimport WebAppPath from '../utilities/WebAppPath';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.xsrfCookieName = 'csrftoken';\r\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\r\n\r\nexport default class App extends React.Component {\r\n    static NO_USER_ID = '-1';\r\n    static NO_USER_NAME = '';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleUserChange = this.handleUserChange.bind(this);\r\n        this.giveUserName = this.giveUserName.bind(this);\r\n\r\n        this.state = {\r\n            path: new WebAppPath(window.location.hash),\r\n            userId: App.NO_USER_ID,\r\n            userName: App.NO_USER_NAME\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('hashchange', () => {\r\n            this.setState({ path: new WebAppPath(window.location.hash) });\r\n        });\r\n    }\r\n\r\n    handleUserChange(id, name) {\r\n        var hash = WebAppPath.getHomeHash();\r\n        window.history.pushState(null, '', hash);\r\n        this.setState({\r\n            userId: id,\r\n            userName: name,\r\n            path: new WebAppPath(hash)\r\n        });\r\n    }\r\n\r\n    giveUserName() {\r\n        return this.state.userName;\r\n    }\r\n\r\n    getBody() {\r\n        var path = this.state.path;\r\n\r\n        if (path.isHome()) {\r\n            return <HomeBody />;\r\n        } else if (path.isExperts()) {\r\n            return <ExpertsBody />;\r\n        } else if (path.isLogin()) {\r\n            return <Login onUserChange={this.handleUserChange} />;\r\n        } else if (path.isCreateAccount()) {\r\n            return <CreateExpert onUserChange={this.handleUserChange} />;\r\n        } else if (path.isIdea()) {\r\n            return <IdeaBody id={path.id} />;\r\n        } else if (path.isContact()) {\r\n            return <WorkInProgress />;\r\n        } else if (path.isAbout()) {\r\n            return <WorkInProgress />;\r\n        } else if (path.isOpinion()) {\r\n            return <OpinionBody id={path.id} />;\r\n        } else if (path.isExpert()) {\r\n            return <ExpertBody id={path.id} />;\r\n        } else {\r\n            // TODO: We need to create a \"Page Not Found\" page\r\n            return <WorkInProgress />;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.StrictMode>\r\n                <NavigationBar getUserName={this.giveUserName} onUserChange={this.handleUserChange} />\r\n                <Container fluid className=\"mb-5 mt-3\">{this.getBody()}</Container>\r\n                <Footer />\r\n            </React.StrictMode>\r\n        );\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}